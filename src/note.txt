import React, { useState } from 'react'
import { Icon } from '@iconify/react';
import './../style/formOne.css';
import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';
import { DatePicker } from 'antd';
import moment from 'moment';
import Select from 'react-select'
import india from './../assets/india.png'

const FormOne = () => {

    const [name, setName] = useState("")
    const [mail, setMail] = useState("")
    const [date, setDate] = useState("")
    const [dateValue, setDateValue] = useState('')
    const [weeks, setWeeks] = useState(false);
    const [weekNo, setWeekNo] = useState('')
    const [weight, setWeight] = useState('')
    const [weightUnit, setWeightUnit] = useState('')
    const [height, setHeight] = useState('')
    const [heightUnit, setHeightUnit] = useState('')
    const [phno, setPhno] = useState('')

    const [nameErr, setNameErr] = useState(false)
    const [mailErr, setMailErr] = useState(false)
    const [dateErr, setDateErr] = useState(false)
    const [weekNoErr, setWeekNoErr] = useState(false)
    const [phnoErr, setPhnoErr] = useState(false)

    const [disable, setdisable] = useState(true)

    const [errors, setErrors] = useState(
        {
            name: "",
            date: "",
            weekNo: "",
            mail: "",
            phno: ""
        }
    )

    const [formData, setFormData] = useState(
        {
            name: "",
            date: "",
            mail: "",
            weeks: false,
            weekNo: "",
            weight: "",
            weightUnit: "",
            height: "",
            heightUnit: "",
            phno: ""
        }
    )

    console.log("FORmData", formData)




    const handleNameChange = (e) => {
        const result = e.target.value.replace(/[^a-z]/gi, '');
        setName(result);
        setNameErr(false)
        setFormData(prevErr => ({ ...prevErr, name: result }));
    }
    const handleEmailChange = (e) => {
        setMail(e.target.value)
        setMailErr(false)
        setFormData(prevErr => ({ ...prevErr, mail: e.target.value }));
    }
    const handleDateChange = (date, dateString) => {
        setDate(dateString);
        setDateValue(date)
        setDateErr(false)
        setFormData(prevErr => ({ ...prevErr, date: dateString }));
    };
    const handleWeekNoChange = (e) => {
        setWeekNo(e.target.value)
        setWeekNoErr(false)
        setFormData(prevErr => ({ ...prevErr, weekNo: e.target.value }));
    }
    const handleWeightChange = (e) => {
        setWeight(e.target.value.replace(/[^0-9.]/g, ''))
        setFormData(prevErr => ({ ...prevErr, weight: e.target.value.replace(/[^0-9.]/g, '') }));
    }
    const handleWeightUnitChange = (e) => {
        setWeightUnit(e)
        setFormData(prevErr => ({ ...prevErr, weightUnit: e.value }));
    }
    const handleHeightChange = (e) => {
        setHeight(e.target.value.replace(/[^0-9.]/g, ''))
        setFormData(prevErr => ({ ...prevErr, height: e.target.value.replace(/[^0-9.]/g, '') }));
    }
    const handleHeightUnitChange = (e) => {
        setHeightUnit(e)
        setFormData(prevErr => ({ ...prevErr, heightUnit: e.value }));
    }
    const handlePhNoChange = (e) => {
        setPhno(e.target.value.replace(/\D/g, ''))
        setPhnoErr(false)
        setFormData(prevErr => ({ ...prevErr, phno: e.target.value.replace(/\D/g, '') }));
    }

    const handleSubmit = (e) =>{
        e.preventDefault();

        if (name === "") {
            setErrors(prevErr => ({ ...prevErr, name: "* Required" }));
            setNameErr(true)
        } else if(name.length < 3) {
            setErrors(prevErr => ({ ...prevErr, name: "* Name must be minimum 3 chararcters or maximum 20 characters" }));
            setNameErr(true)
        }
        if (dateValue === ""){
            setErrors(prevErr => ({ ...prevErr, date: "* Required" }));
            setDateErr(true)
        }
        if (weekNo === ""){
            setErrors(prevErr => ({ ...prevErr, weekNo: "* Required" }));
            setWeekNoErr(true)
        }
        if (mail === ""){
            setErrors(prevErr => ({ ...prevErr, mail: "* Required" }));
            setMailErr(true)
        } else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(mail)){
            setErrors(prevErr => ({ ...prevErr, mail: "* Invalid email address" }));
            setMailErr(true)
        }
        if (phno === ""){
            setErrors(prevErr => ({ ...prevErr, phno: "* Required" }));
            setPhnoErr(true)
        } else if(phno.length !== 10){
            setErrors(prevErr => ({ ...prevErr, phno: "* Invalid Phone Number" }));
            setPhnoErr(true)
        }
        
    }

    const handleDisable = () =>{
        if(name !== "" && name.length > 3 && dateValue !== "" && weekNo !== "" && mail !== "" && /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(mail) && phno !== "" && phno.length !== 10 ){
            setdisable(false)
        } else{
            setdisable(true)
        }
    }

  return (
    <div className='py-5'>
      <div className='form-outer'>
        <div className='go-back'><Icon className='back-icon' icon="bx:arrow-back" /> <span>Back</span></div>
        <div className='stepper'>
            <div className='steps' style={{backgroundColor:'#7C55C5'}}></div>
            <div className='steps' style={{backgroundColor:'#F2F2F2'}}></div>
            <div className='steps' style={{backgroundColor:'#F2F2F2'}}></div>
            <div className='steps' style={{backgroundColor:'#F2F2F2'}}></div>
        </div>
        <div className='top-content'>
            <p>Get your questions answered by our consultants from the comfort of your home</p>
        </div>
        <div>
            <Form onSubmit={handleSubmit}>
                <Form.Group className="mb-3" controlId="formBasicEmail">
                    <Form.Label className='form-label'>Child's name</Form.Label>
                    <Form.Control 
                        type="text" placeholder="Enter name"
                        value={name}
                        onChange={handleNameChange}
                        maxLength={20}
                        autoComplete='new-password'
                    />
                    {nameErr && (
                     <Form.Text className='err-msg'>{errors.name}</Form.Text>
                    )}
                </Form.Group>

                <Form.Group className="mb-3 date-group" controlId="formBasicPassword">
                    <Form.Label>Child's date of birth</Form.Label>
                    <DatePicker 
                        format="MMM DD, YYYY" 
                        disabledDate={(current) => current && current >= moment().startOf('day')}
                        value={dateValue}
                        onChange={handleDateChange}
                    />
                    {dateErr && (
                     <Form.Text className='err-msg'>{errors.date}</Form.Text>
                    )}
                </Form.Group>

                <Form.Group className="mb-3" controlId="formBasicEmail">
                    <Form.Label className='form-label'>Born at less than 37 weeks?</Form.Label>
                    <Form.Check
                        className='mt-2'
                        type="radio"
                        label="No"
                        name="weeks"
                        checked={weeks === false}
                        onChange={() => {
                            setWeeks(false)
                            setFormData(prevErr => ({ ...prevErr, weeks: false }));
                        }}
                    />
                    <Form.Check
                        className='mt-2'
                        type="radio"
                        label="Yes"
                        name="weeks"
                        checked={weeks === true}
                        onChange={() => {
                            setWeeks(true)
                            setWeekNoErr(false)
                            setFormData(prevErr => ({ ...prevErr, weeks: true }));
                        }}
                    />
                </Form.Group>
                
                {weeks && (
                    <Form.Group className="mb-3" controlId="formBasicEmail">
                        <Form.Label className='form-label'>Born in weeks</Form.Label>
                        <Form.Control type="number" min={20} max={36}
                            onChange={handleWeekNoChange}    
                            value={weekNo}
                            autoComplete='new-password'
                        />
                    </Form.Group>
                )}
                {weekNoErr && weeks && (
                        <Form.Text className='err-msg'>{errors.weekNo}</Form.Text>
                )}
                <div className='two-field'>
                    <Form.Group className="mb-3 form-grp-two" controlId="formBasicEmail">
                        <Form.Label className='form-label-two'>Child's weight</Form.Label>
                        <Form.Control type="text" onChange={handleWeightChange} value={weight} />
                    </Form.Group>
                    <Form.Group className="mb-3 form-grp-two" controlId="formBasicEmail">
                        <Form.Label className='form-label-two'>Weight unit</Form.Label>
                        <Select 
                            options={[{value: 'kg', label: 'Kg'}, {value: 'g', label: 'g'}]}
                            onChange={handleWeightUnitChange}
                            value={weightUnit}
                        />
                    </Form.Group>
                </div>

                <div className='two-field'>
                    <Form.Group className="mb-3 form-grp-two" controlId="formBasicEmail">
                        <Form.Label className='form-label-two'>Child's height</Form.Label>
                        <Form.Control type="text" onChange={handleHeightChange} value={height} />
                    </Form.Group>
                    <Form.Group className="mb-3 form-grp-two" controlId="formBasicEmail">
                        <Form.Label className='form-label-two'>Height unit</Form.Label>
                        <Select options={[{value: 'cm', label: 'cm'}, {value: 'm', label: 'm'}]}
                            onChange={handleHeightUnitChange}
                            value={heightUnit}
                        />
                    </Form.Group>
                </div>

                <Form.Group className="mb-3" controlId="formBasicEmail">
                    <Form.Label className='form-label'>Email address</Form.Label>
                    <Form.Control type="text" placeholder="Enter email"
                        value={mail}
                        onChange={handleEmailChange}    
                    />
                    {mailErr && (
                     <Form.Text className='err-msg'>{errors.mail}</Form.Text>
                    )}
                </Form.Group>

                <Form.Group className="mb-3" controlId="formBasicEmail">
                    <Form.Label className='form-label'>Phone number</Form.Label>
                    <div className='phone-number-field'>
                        <div className='country-code'>
                            <div className='flag-outer'>
                                <img src={india} alt="flag" />
                            </div>
                            <div style={{color: "#ACACAC", fontSize: '20px', fontWeight: "600"}}> + 91</div>
                            <div><Icon className='down-icon' icon="material-symbols:keyboard-arrow-down-rounded" /></div>
                        </div>
                        <Form.Control type="text" onChange={handlePhNoChange} value={phno} maxLength={10} />
                    </div>
                    {phnoErr && (
                     <Form.Text className='err-msg'>{errors.phno}</Form.Text>
                    )}
                </Form.Group>

                <Button className='next-btn my-3' type="submit" disabled={handleDisable}>
                    <span>Next</span>
                </Button>
            </Form>
        </div>
      </div>
    </div>
  )
}

export default FormOne



import React, { useState } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'

const SubForm = () => {
    const navigate = useNavigate()
    const location = useLocation()

    const [currentIndex, setCurrentIndex] = useState(0)
    console.log(location)
    console.log(location.state[currentIndex])

    const handleClick = () => {
        if(currentIndex < location.state.length-1){
            setCurrentIndex(currentIndex + 1)
        } else{
            alert("NAVIGATE")
        }
        
    }
    const handleBackClick = () => {
        if(currentIndex > 0){
            setCurrentIndex(currentIndex - 1)
        } else if(currentIndex === 0) {
            navigate('/step-two')
        }
    }


    return (
        <div>
            {
                currentIndex === 0 && (
                    <div>
                        <h1>{location.state[currentIndex].name}</h1>
                        <button onClick={handleClick}>NEXT</button>
                        <button onClick={handleBackClick}>BACK</button>
                    </div>
                )
            }
            {
                currentIndex === 1 && (
                    <div>
                        <h1>{location.state[currentIndex].name}</h1>
                        <button onClick={handleClick}>NEXT</button>
                        <button onClick={handleBackClick}>BACK</button>

                    </div>
                )
            }
            {
                currentIndex === 2 && (
                    <div>
                        <h1>{location.state[currentIndex].name}</h1>
                        <button onClick={handleClick}>NEXT</button>
                        <button onClick={handleBackClick}>BACK</button>

                    </div>
                )
            }
            {
                currentIndex === 3 && (
                    <div>
                        <h1>{location.state[currentIndex].name}</h1>
                        <button onClick={handleClick}>NEXT</button>
                        <button onClick={handleBackClick}>BACK</button>

                    </div>
                )
            }
            {
                currentIndex === 4 && (
                    <div>
                        <h1>{location.state[currentIndex].name}</h1>
                        <button onClick={handleClick}>NEXT</button>
                        <button onClick={handleBackClick}>BACK</button>

                    </div>
                )
            }
            {
                currentIndex === 5 && (
                    <div>
                        <h1>{location.state[currentIndex].name}</h1>
                        <button onClick={handleClick}>NEXT</button>
                        <button onClick={handleBackClick}>BACK</button>

                    </div>
                )
            }


        </div>
    )
}

export default SubForm
